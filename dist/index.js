"use strict";

exports["default"] = reduce;
/**
 * Copyright 2014 Shape Security, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License")
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var generateSpec = require("shift-spec")["default"];
var MonoidalReducer = require("./monoidal-reducer")["default"];
exports.MonoidalReducer = MonoidalReducer;



function recurse(branch) {
  return function (reducer, node) {
    var branchNode = node[branch];
    return DRIVER[branchNode.type](reducer, branchNode);
  };
}

function recurseMaybe(branch) {
  return function (reducer, node) {
    var branchNode = node[branch];
    if (branchNode == null) return null;
    return DRIVER[branchNode.type](reducer, branchNode);
  };
}

function recurseList(branch) {
  return function (reducer, node) {
    return [].map.call(node[branch], function (n) {
      return DRIVER[n.type](reducer, n);
    });
  };
}

function recurseListMaybe(branch) {
  return function (reducer, node) {
    return [].map.call(node[branch], function (n) {
      if (n == null) return null;
      return DRIVER[n.type](reducer, n);
    });
  };
}

var PRIMITIVE = {};

function noop(branch) {
  return function (reducer, node) {
    return PRIMITIVE;
  };
}

var REDUCER_SPEC = generateSpec(noop, recurse, recurseList, recurseMaybe, recurseListMaybe);

var DRIVER = (function () {
  var o = Object.create(null);
  for (var T in REDUCER_SPEC) {
    (function (T) {
      var reducingFunctionName = "reduce" + T;
      o[T] = function (reducer, node) {
        return reducer[reducingFunctionName].apply(reducer, [node].concat(REDUCER_SPEC[T].map(function (f) {
          return f(reducer, node);
        }).filter(function (v) {
          return v !== PRIMITIVE;
        })));
      };
    })(T);
  }
  return o;
})();


function reduce(reducer, reducible) {
  return DRIVER[reducible.type](reducer, reducible);
}
//# sourceMappingURL=data:application/json;base64,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LENBQUM7aUJBQUksQ0FBQyxLQUFLLFNBQVM7U0FBQSxDQUFDLENBQzFFLENBQUMsQ0FBQztPQUNKLENBQUM7T0FOSSxDQUFDO0dBT1I7QUFDRCxTQUFPLENBQUMsQ0FBQztDQUNWLENBQUEsRUFBRSxBQUFDLENBQUM7OztBQUdVLFNBQVMsTUFBTSxDQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUU7QUFDakQsU0FBTyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztDQUNuRCIsImZpbGUiOiJzcmMvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAyMDE0IFNoYXBlIFNlY3VyaXR5LCBJbmMuXG4gKlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKVxuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKi9cblxuaW1wb3J0IGdlbmVyYXRlU3BlYyBmcm9tIFwic2hpZnQtc3BlY1wiO1xuXG5pbXBvcnQgTW9ub2lkYWxSZWR1Y2VyIGZyb20gXCIuL21vbm9pZGFsLXJlZHVjZXJcIlxuZXhwb3J0IHtNb25vaWRhbFJlZHVjZXJ9O1xuXG5cbmZ1bmN0aW9uIHJlY3Vyc2UoYnJhbmNoKSB7XG4gIHJldHVybiBmdW5jdGlvbihyZWR1Y2VyLCBub2RlKSB7XG4gICAgbGV0IGJyYW5jaE5vZGUgPSBub2RlW2JyYW5jaF07XG4gICAgcmV0dXJuIERSSVZFUlticmFuY2hOb2RlLnR5cGVdKHJlZHVjZXIsIGJyYW5jaE5vZGUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiByZWN1cnNlTWF5YmUoYnJhbmNoKSB7XG4gIHJldHVybiBmdW5jdGlvbihyZWR1Y2VyLCBub2RlKSB7XG4gICAgbGV0IGJyYW5jaE5vZGUgPSBub2RlW2JyYW5jaF07XG4gICAgaWYgKGJyYW5jaE5vZGUgPT0gbnVsbCkgcmV0dXJuIG51bGw7XG4gICAgcmV0dXJuIERSSVZFUlticmFuY2hOb2RlLnR5cGVdKHJlZHVjZXIsIGJyYW5jaE5vZGUpO1xuICB9O1xufVxuXG5mdW5jdGlvbiByZWN1cnNlTGlzdChicmFuY2gpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHJlZHVjZXIsIG5vZGUpIHtcbiAgICByZXR1cm4gW10ubWFwLmNhbGwobm9kZVticmFuY2hdLCAobikgPT4gRFJJVkVSW24udHlwZV0ocmVkdWNlciwgbikpO1xuICB9O1xufVxuXG5mdW5jdGlvbiByZWN1cnNlTGlzdE1heWJlKGJyYW5jaCkge1xuICByZXR1cm4gZnVuY3Rpb24ocmVkdWNlciwgbm9kZSkge1xuICAgIHJldHVybiBbXS5tYXAuY2FsbChub2RlW2JyYW5jaF0sIChuKSA9PiB7XG4gICAgICBpZiAobiA9PSBudWxsKSByZXR1cm4gbnVsbDtcbiAgICAgIHJldHVybiBEUklWRVJbbi50eXBlXShyZWR1Y2VyLCBuKTtcbiAgICB9KTtcbiAgfTtcbn1cblxuY29uc3QgUFJJTUlUSVZFID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoYnJhbmNoKSB7XG4gIHJldHVybiBmdW5jdGlvbihyZWR1Y2VyLCBub2RlKSB7XG4gICAgcmV0dXJuIFBSSU1JVElWRTtcbiAgfVxufVxuXG5jb25zdCBSRURVQ0VSX1NQRUMgPSBnZW5lcmF0ZVNwZWMobm9vcCwgcmVjdXJzZSwgcmVjdXJzZUxpc3QsIHJlY3Vyc2VNYXliZSwgcmVjdXJzZUxpc3RNYXliZSk7XG5cbmNvbnN0IERSSVZFUiA9IChmdW5jdGlvbigpe1xuICB2YXIgbyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIGZvcihsZXQgVCBpbiBSRURVQ0VSX1NQRUMpIHtcbiAgICBsZXQgcmVkdWNpbmdGdW5jdGlvbk5hbWUgPSBcInJlZHVjZVwiICsgVDtcbiAgICBvW1RdID0gZnVuY3Rpb24ocmVkdWNlciwgbm9kZSkge1xuICAgICAgcmV0dXJuIHJlZHVjZXJbcmVkdWNpbmdGdW5jdGlvbk5hbWVdLmFwcGx5KHJlZHVjZXIsIFtub2RlXS5jb25jYXQoXG4gICAgICAgIFJFRFVDRVJfU1BFQ1tUXS5tYXAoKGYpID0+IGYocmVkdWNlciwgbm9kZSkpLmZpbHRlcih2ID0+IHYgIT09IFBSSU1JVElWRSlcbiAgICAgICkpO1xuICAgIH07XG4gIH1cbiAgcmV0dXJuIG87XG59KCkpO1xuXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlZHVjZShyZWR1Y2VyLCByZWR1Y2libGUpIHtcbiAgcmV0dXJuIERSSVZFUltyZWR1Y2libGUudHlwZV0ocmVkdWNlciwgcmVkdWNpYmxlKTtcbn1cbiJdfQ==